service: reservation-server

functions:
  createReservation:
    handler: reservations.createReservation
    events:
      - httpApi:
          path: /reservation
          method: POST
  getReservations:
    handler: reservations.getReservations
    events:
      - httpApi:
          path: /reservation
          method: GET
  deleteReservations:
    handler: reservations.deleteReservation
    events:
      - httpApi:
          path: /reservation
          method: DELETE
  checkReservation:
    handler: reservations.checkReservation
    events:
      - httpApi:
          path: /checkReservation
          method: POST
  createTable:
    handler: tables.createTable
    events:
      - httpApi:
          path: /tables
          method: POST
  getTables:
    handler: tables.getTables
    events:
      - httpApi:
          path: /tables
          method: GET
  deleteTable:
    handler: tables.deleteTable
    events:
      - httpApi:
          path: /tables
          method: DELETE
  updateTable:
    handler: tables.updateTable
    events:
      - httpApi:
          path: /tables
          method: PUT
  getVip:
    handler: vips.getVip
    events:
      - httpApi:
          path: /vip
          method: GET
  getVips:
    handler: vips.getVips
    events:
      - httpApi:
          path: /vips
          method: GET
  updateVip:
    handler: vips.updateVip
    events:
      - httpApi:
          path: /vip
          method: PUT
  deleteVip:
    handler: vips.deleteVip
    events:
      - httpApi:
          path: /vip
          method: DELETE
  createVip:
    handler: vips.createVip
    events:
      - httpApi:
          path: /vip
          method: POST
  createAdmin:
    handler: admin.createAdmin
    events:
      - httpApi:
          path: /admin
          method: POST
  deleteAdmin:
    handler: admin.deleteAdmin
    events:
      - httpApi:
          path: /admin
          method: DELETE
  updateAdmin:
    handler: admin.updateAdmin
    events:
      - httpApi:
          path: /admin
          method: PUT
  getAdmins:
    handler: admin.getAdmins
    events:
      - httpApi:
          path: /admins
          method: GET

resources:
  Resources:
    VipTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-vipTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
    ReservationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: dayval
            AttributeType: N
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: dayval
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        TableName: ${self:service}-reservationTable-${sls:stage}
    LayoutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-layoutTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
    AdminTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-adminTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH

provider:
  name: aws
  httpApi:
    cors: true
  runtime: nodejs16.x
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:Scan*"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-reservationTable-${sls:stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-vipTable-${sls:stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-layoutTable-${sls:stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-adminTable-${sls:stage}
        - Effect: "Allow"
          Action:
            - "ses:sendEmail"
          Resource:
            - "*"
  environment:
    DYNAMODB_RESERVATION_TABLE: ${self:service}-reservationTable-${sls:stage}
    DYNAMODB_VIP_TABLE: ${self:service}-vipTable-${sls:stage}
    DYNAMODB_LAYOUT_TABLE: ${self:service}-layoutTable-${sls:stage}
    DYNAMODB_ADMIN_TABLE: ${self:service}-adminTable-${sls:stage}
    twilioSID: ${ssm:/twiliosid}
    twilioAuth: ${ssm:/twilioauth}
